name: GLideN64

on: [push, pull_request, workflow_dispatch]

jobs:
  Windows:
    runs-on: windows-latest
    strategy:
      matrix:
        image: ["GLideN64 (x64 Mupen64Plus-Qt)"]
    env:
      QT_VERSION: "6.8.2"  # Updated Qt version
      QT_HOST: "windows"   # Host platform
      QT_TARGET: "desktop" # Target platform
      QT_ARCH: "win64_msvc2022_64"  # Updated architecture
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python for aqtinstall
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install Qt6 using aqtinstall
        run: |
          echo "Doctor House: 'Installing Qt6... This better work.'"
          pip install aqtinstall
          aqt install-qt ${{ env.QT_HOST }} ${{ env.QT_TARGET }} ${{ env.QT_VERSION }} ${{ env.QT_ARCH }}

      - name: Verify Qt Installation
        run: |
          echo "Doctor House: 'Let's verify the Qt installation...'"
          $QTDIR = "$pwd\6.8.2\msvc2022_64"
          if (Test-Path "$QTDIR\bin\qmake.exe") {
            echo "Qt installation verified. qmake.exe found at $QTDIR\bin\qmake.exe"
          } else {
            echo "ERROR: qmake.exe not found at $QTDIR\bin\qmake.exe"
            exit 1
          }
        shell: pwsh

      - name: Set up MSBuild
        uses: microsoft/setup-msbuild@v2

      - name: Set up MSYS2
        uses: msys2/setup-msys2@v2
        with:
          update: true
          install: >-
            make
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-freetype
            mingw-w64-x86_64-libpng
            git

      - name: Install Ninja
        run: |
          echo "Doctor House: 'Installing Ninja build system...'"
          choco install ninja -y

      - name: Set up vcpkg
        run: |
          echo "Doctor House: 'Setting up vcpkg...'"
          git clone https://github.com/microsoft/vcpkg.git
          ./vcpkg/bootstrap-vcpkg.sh

      - name: Install ZLIB using vcpkg
        run: |
          echo "Doctor House: 'Installing ZLIB using vcpkg...'"
          ./vcpkg/vcpkg install zlib

      - name: Print Qt Version
        run: |
          echo "Doctor House: 'Let's see what version of Qt we're dealing with...'"
          $QTDIR = "$pwd\6.8.2\msvc2022_64"
          & "$QTDIR\bin\qmake.exe" --version
        shell: pwsh

      - name: Prepare Environment
        run: |
          echo "Doctor House: 'Preparing the environment...'"
          $env:revision = git rev-parse --short HEAD
          echo "PJ64PluginsDirQT=$pwd\build\windows-project64-qt\" >> $env:GITHUB_ENV
          echo "PJ64PluginsDirQT_x64=$pwd\build\windows-project64-qt-x64\" >> $env:GITHUB_ENV
          echo "Mupen64PluginsDir=$pwd\build\windows-mupen64plus-cli\" >> $env:GITHUB_ENV
          echo "Mupen64PluginsDir_x64=$pwd\build\windows-mupen64plus-cli-x64\" >> $env:GITHUB_ENV
          echo "GIT_REVISION=$env:revision" >> $env:GITHUB_ENV
        shell: pwsh

      - name: Build GLideN64 (x64 Mupen64Plus-Qt)
        if: ${{ matrix.image == 'GLideN64 (x64 Mupen64Plus-Qt)' }}
        run: |
          echo "Doctor House: 'Building GLideN64 for Mupen64Plus-Qt x64...'"
          $QTDIR = "$pwd\6.8.2\msvc2022_64"
          mkdir -p build/windows-mupen64plus-qt
          pushd build/windows-mupen64plus-qt
          cmake -G "Ninja" -DCMAKE_BUILD_TYPE=Release -DMUPENPLUSAPI=1 -DMUPENPLUSAPI_GLIDENUI=1 -DDEBUG_DUMP=ON -DGLIDENUI_QT6=ON -DCMAKE_PREFIX_PATH="$QTDIR" -DCMAKE_TOOLCHAIN_FILE="$pwd/vcpkg/scripts/buildsystems/vcpkg.cmake" ../../src
          cmake --build . --config Release --parallel
          popd
          cp ini/GLideN64_sceneripper.custom.ini build/windows-mupen64plus-qt/
          cp translations/release/*.qm build/windows-mupen64plus-qt/
        shell: pwsh

      - name: Upload GLideN64 (x64 Mupen64Plus-Qt)
        uses: actions/upload-artifact@v4
        if: ${{ matrix.image == 'GLideN64 (x64 Mupen64Plus-Qt)' }}
        with:
          name: GLideN64-${{ env.GIT_REVISION }}-Windows-Mupen64Plus-Qt-x64
          path: |
            build\windows-mupen64plus-qt\*.dll
            build\windows-mupen64plus-qt\GLideN64_sceneripper.custom.ini
            build\windows-mupen64plus-qt\*.qm
