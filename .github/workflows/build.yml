name: Build GLideN64 with Qt 6

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  Windows:
    runs-on: windows-latest
    strategy:
      matrix:
        image: ["GLideN64 (x64 Mupen64Plus-Qt)"]
    env:
      QTDIR_x86: C:\Static_Qt_x86
      QTDIR_x64: C:\Static_Qt_x64
      QT_BUILD_BASE_URL: https://github.com/gonetz/GLideN64/releases/download/qt_build/
      QT_BUILD_x86: qt-6.0-x86-msvc2019-static
      QT_BUILD_x64: qt-6.0-x64-msvc2019-static
    steps:
      - uses: actions/checkout@v4
      - uses: microsoft/setup-msbuild@v2
      - uses: msys2/setup-msys2@v2
        with:
          update: true
          install: >-
            make
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-freetype
            mingw-w64-x86_64-libpng
            mingw-w64-x86_64-qt6
            git
      - name: Print Qt Version
        run: |
          echo "Doctor House: 'Let's see what version of Qt we're dealing with...'"
          qmake --version
        shell: msys2 {0}
      - name: Prepare Environment
        run: |
          echo "Doctor House: 'Preparing the environment...'"
          $env:revision = git rev-parse --short HEAD
          echo "PJ64PluginsDirQT=$pwd\build\windows-project64-qt\" >> $env:GITHUB_ENV
          echo "PJ64PluginsDirQT_x64=$pwd\build\windows-project64-qt-x64\" >> $env:GITHUB_ENV
          echo "PJ64PluginsDirWTL=$pwd\build\windows-project64-wtl\" >> $env:GITHUB_ENV
          echo "PJ64PluginsDirWTL_x64=$pwd\build\windows-project64-wtl-x64\" >> $env:GITHUB_ENV
          echo "Mupen64PluginsDir=$pwd\build\windows-mupen64plus-cli\" >> $env:GITHUB_ENV
          echo "Mupen64PluginsDir_x64=$pwd\build\windows-mupen64plus-cli-x64\" >> $env:GITHUB_ENV
          echo "GIT_REVISION=$env:revision" >> $env:GITHUB_ENV
        shell: pwsh
      - name: Prepare Qt Builds
        if: ${{ matrix.image == 'GLideN64 (x64 Project64-Qt)' || matrix.image == 'GLideN64 (x86 Project64-Qt)' }}
        run: |
          echo "Doctor House: 'Preparing Qt builds...'"
          curl -L -o %QT_BUILD_x86%.7z %QT_BUILD_BASE_URL%/%QT_BUILD_x86%.7z
          curl -L -o %QT_BUILD_x64%.7z %QT_BUILD_BASE_URL%/%QT_BUILD_x64%.7z
          7z x -o%QTDIR_x86% %QT_BUILD_x86%.7z
          7z x -o%QTDIR_x64% %QT_BUILD_x64%.7z
        shell: cmd
      - name: Build GLideN64 (x64 Mupen64Plus-Qt)
        if: ${{ matrix.image == 'GLideN64 (x64 Mupen64Plus-Qt)' }}
        run: |
          echo "Doctor House: 'Building GLideN64 for Mupen64Plus-Qt x64...'"
          mkdir -p build/windows-mupen64plus-qt
          pushd build/windows-mupen64plus-qt
          cmake -DCMAKE_BUILD_TYPE=Release -DMUPENPLUSAPI=1 -DMUPENPLUSAPI_GLIDENUI=1 -DDEBUG_DUMP=ON -G "MSYS Makefiles" ../../src
          make -j$(nproc)
          popd
          cp ini/GLideN64_sceneripper.custom.ini build/windows-mupen64plus-qt/
          cp translations/release/*.qm build/windows-mupen64plus-qt/
        shell: msys2 {0}
      - name: Upload GLideN64 (x64 Mupen64Plus-Qt)
        uses: actions/upload-artifact@v4
        if: ${{ matrix.image == 'GLideN64 (x64 Mupen64Plus-Qt)' }}
        with:
          name: GLideN64-${{ env.GIT_REVISION }}-Windows-Mupen64Plus-Qt-x64
          path: |
            build\windows-mupen64plus-qt\*.dll
            build\windows-mupen64plus-qt\GLideN64_sceneripper.custom.ini
            build\windows-mupen64plus-qt\*.qm
  Release:
    runs-on: ubuntu-latest
    needs: [Windows]
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v4
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Re-Package Artifacts
        run: |
          echo "Doctor House: 'Re-packaging artifacts...'"
          cd artifacts
          for artifact in *
          do
            echo "-> Creating ${artifact}.zip"
            pushd "$artifact"
            zip -r "../${artifact}.zip" *
            popd
          done
      - name: Update Git Tag
        run: |
          echo "Doctor House: 'Updating Git tag...'"
          git tag -f github-actions
          git push -f origin github-actions
      - name: Create Release
        uses: ncipollo/release-action@v2
        with:
          allowUpdates: true
          removeArtifacts: true
          replacesArtifacts: false
          omitBodyDuringUpdate: true
          omitNameDuringUpdate: true
          tag: github-actions
          artifacts: "artifacts/*.zip"
